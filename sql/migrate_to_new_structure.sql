-- =====================================================================
-- Migration Script: Move to Three-Database Architecture
-- RAW_DB → STAGING_DB → PRODUCTION_DB
-- Source systems (FieldRoutes, etc.) as schemas
-- =====================================================================

-- Step 1: Create new warehouse (if needed)
-- Note: This might need to be done manually in Snowflake UI
-- CREATE WAREHOUSE IF NOT EXISTS ALTAPESTANALYTICS 
--   WITH WAREHOUSE_SIZE = 'X-SMALL' 
--   AUTO_SUSPEND = 60 
--   AUTO_RESUME = TRUE;

-- Step 2: Create new databases
CREATE DATABASE IF NOT EXISTS RAW_DB;
CREATE DATABASE IF NOT EXISTS STAGING_DB;
CREATE DATABASE IF NOT EXISTS PRODUCTION_DB;

-- Step 3: Create schemas for FieldRoutes in each database
USE DATABASE RAW_DB;
CREATE SCHEMA IF NOT EXISTS FIELDROUTES;

USE DATABASE STAGING_DB;
CREATE SCHEMA IF NOT EXISTS FIELDROUTES;

USE DATABASE PRODUCTION_DB;
CREATE SCHEMA IF NOT EXISTS FIELDROUTES;

-- Step 4: Grant permissions (adjust roles as needed)
GRANT USAGE ON DATABASE RAW_DB TO ROLE ACCOUNTADMIN;
GRANT USAGE ON DATABASE STAGING_DB TO ROLE ACCOUNTADMIN;
GRANT USAGE ON DATABASE PRODUCTION_DB TO ROLE ACCOUNTADMIN;

GRANT ALL ON SCHEMA RAW_DB.FIELDROUTES TO ROLE ACCOUNTADMIN;
GRANT ALL ON SCHEMA STAGING_DB.FIELDROUTES TO ROLE ACCOUNTADMIN;
GRANT ALL ON SCHEMA PRODUCTION_DB.FIELDROUTES TO ROLE ACCOUNTADMIN;

-- Step 5: Migrate RAW data (from ALTAPEST_DB.RAW.fieldroutes to RAW_DB.FIELDROUTES)
USE DATABASE RAW_DB;
USE SCHEMA FIELDROUTES;

-- Dimension tables
CREATE TABLE IF NOT EXISTS OFFICE_DIM CLONE RAW.fieldroutes.OFFICE_DIM;
CREATE TABLE IF NOT EXISTS REGION_DIM CLONE RAW.fieldroutes.REGION_DIM;
CREATE TABLE IF NOT EXISTS SERVICETYPE_DIM CLONE RAW.fieldroutes.SERVICETYPE_DIM;
CREATE TABLE IF NOT EXISTS CUSTOMERSOURCE_DIM CLONE RAW.fieldroutes.CUSTOMERSOURCE_DIM;
CREATE TABLE IF NOT EXISTS GENERICFLAG_DIM CLONE RAW.fieldroutes.GENERICFLAG_DIM;
CREATE TABLE IF NOT EXISTS CANCELLATIONREASON_DIM CLONE RAW.fieldroutes.CANCELLATIONREASON_DIM;
CREATE TABLE IF NOT EXISTS PRODUCT_DIM CLONE RAW.fieldroutes.PRODUCT_DIM;
CREATE TABLE IF NOT EXISTS RESERVICEREASON_DIM CLONE RAW.fieldroutes.RESERVICEREASON_DIM;

-- Fact tables
CREATE TABLE IF NOT EXISTS CUSTOMER_FACT CLONE RAW.fieldroutes.CUSTOMER_FACT;
CREATE TABLE IF NOT EXISTS EMPLOYEE_FACT CLONE RAW.fieldroutes.EMPLOYEE_FACT;
CREATE TABLE IF NOT EXISTS APPOINTMENT_FACT CLONE RAW.fieldroutes.APPOINTMENT_FACT;
CREATE TABLE IF NOT EXISTS SUBSCRIPTION_FACT CLONE RAW.fieldroutes.SUBSCRIPTION_FACT;
CREATE TABLE IF NOT EXISTS ROUTE_FACT CLONE RAW.fieldroutes.ROUTE_FACT;
CREATE TABLE IF NOT EXISTS TICKET_FACT CLONE RAW.fieldroutes.TICKET_FACT;
CREATE TABLE IF NOT EXISTS TICKETITEM_FACT CLONE RAW.fieldroutes.TICKETITEM_FACT;
CREATE TABLE IF NOT EXISTS PAYMENT_FACT CLONE RAW.fieldroutes.PAYMENT_FACT;
CREATE TABLE IF NOT EXISTS APPLIEDPAYMENT_FACT CLONE RAW.fieldroutes.APPLIEDPAYMENT_FACT;
CREATE TABLE IF NOT EXISTS NOTE_FACT CLONE RAW.fieldroutes.NOTE_FACT;
CREATE TABLE IF NOT EXISTS TASK_FACT CLONE RAW.fieldroutes.TASK_FACT;
CREATE TABLE IF NOT EXISTS DOOR_FACT CLONE RAW.fieldroutes.DOOR_FACT;
CREATE TABLE IF NOT EXISTS DISBURSEMENT_FACT CLONE RAW.fieldroutes.DISBURSEMENT_FACT;
CREATE TABLE IF NOT EXISTS CHARGEBACK_FACT CLONE RAW.fieldroutes.CHARGEBACK_FACT;
CREATE TABLE IF NOT EXISTS ADDITIONALCONTACTS_FACT CLONE RAW.fieldroutes.ADDITIONALCONTACTS_FACT;
CREATE TABLE IF NOT EXISTS DISBURSEMENTITEM_FACT CLONE RAW.fieldroutes.DISBURSEMENTITEM_FACT;
CREATE TABLE IF NOT EXISTS GENERICFLAGASSIGNMENT_FACT CLONE RAW.fieldroutes.GENERICFLAGASSIGNMENT_FACT;
CREATE TABLE IF NOT EXISTS KNOCK_FACT CLONE RAW.fieldroutes.KNOCK_FACT;
CREATE TABLE IF NOT EXISTS PAYMENTPROFILE_FACT CLONE RAW.fieldroutes.PAYMENTPROFILE_FACT;
CREATE TABLE IF NOT EXISTS APPOINTMENTREMINDER_FACT CLONE RAW.fieldroutes.APPOINTMENTREMINDER_FACT;

-- Special tables
CREATE TABLE IF NOT EXISTS CUSTOMERCANCELLATIONREASONS_FACT CLONE RAW.fieldroutes.CUSTOMERCANCELLATIONREASONS_FACT;

-- Step 6: STAGING_DB tables will be created by transformation flow
-- Since we never created an ANALYTICS schema, there's nothing to migrate here.
-- The transformation flow (transform_raw_to_staging) will create these tables
-- from the RAW data when you run it for the first time.

-- Note: If you had previously created any analytics tables manually,
-- you would need to migrate them here. Otherwise, skip to Step 7.

-- Step 7: Create views in PRODUCTION_DB
USE DATABASE PRODUCTION_DB;
USE SCHEMA FIELDROUTES;

-- Core reporting views will be created by running updated SQL scripts

-- Step 8: Update reference tables (office watermarks, etc.)
-- These need to stay in a central location accessible by all databases
USE DATABASE RAW_DB;
CREATE SCHEMA IF NOT EXISTS REF;
USE SCHEMA REF;

-- Clone reference tables if they exist
CREATE TABLE IF NOT EXISTS offices_lookup CLONE ALTAPEST_DB.RAW.REF.offices_lookup;
CREATE TABLE IF NOT EXISTS office_entity_watermark CLONE ALTAPEST_DB.RAW.REF.office_entity_watermark;

-- Step 9: Verify migration
-- Run these queries to confirm data migrated successfully
USE DATABASE RAW_DB;
SELECT 'RAW_DB.FIELDROUTES' as Location, TABLE_NAME, ROW_COUNT 
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_NAME;

USE DATABASE STAGING_DB;
SELECT 'STAGING_DB.FIELDROUTES' as Location, TABLE_NAME, ROW_COUNT 
FROM FIELDROUTES.INFORMATION_SCHEMA.TABLES 
WHERE TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_NAME;

-- Step 10: After verification, drop old structures (DO THIS CAREFULLY!)
-- DROP SCHEMA IF EXISTS ALTAPEST_DB.RAW CASCADE;
-- DROP SCHEMA IF EXISTS ALTAPEST_DB.ANALYTICS CASCADE;
-- Consider keeping ALTAPEST_DB as archive for a period

-- Notes:
-- 1. CLONE operations are instant and don't copy data (zero-copy cloning)
-- 2. Run this script section by section, verifying each step
-- 3. Update all ETL jobs BEFORE dropping old structures
-- 4. Consider running old and new pipelines in parallel briefly